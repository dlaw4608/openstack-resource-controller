/*
Copyright 2025 The ORC Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by MockGen. DO NOT EDIT.
// Source: ../volumetype.go
//
// Generated by this command:
//
//	mockgen -package mock -destination=volumetype.go -source=../volumetype.go github.com/k-orc/openstack-resource-controller/internal/osclients/mock VolumeTypeClient
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	iter "iter"
	reflect "reflect"

	volumetypes "github.com/gophercloud/gophercloud/v2/openstack/blockstorage/v3/volumetypes"
	gomock "go.uber.org/mock/gomock"
)

// MockVolumeTypeClient is a mock of VolumeTypeClient interface.
type MockVolumeTypeClient struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeTypeClientMockRecorder
	isgomock struct{}
}

// MockVolumeTypeClientMockRecorder is the mock recorder for MockVolumeTypeClient.
type MockVolumeTypeClientMockRecorder struct {
	mock *MockVolumeTypeClient
}

// NewMockVolumeTypeClient creates a new mock instance.
func NewMockVolumeTypeClient(ctrl *gomock.Controller) *MockVolumeTypeClient {
	mock := &MockVolumeTypeClient{ctrl: ctrl}
	mock.recorder = &MockVolumeTypeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeTypeClient) EXPECT() *MockVolumeTypeClientMockRecorder {
	return m.recorder
}

// CreateVolumeType mocks base method.
func (m *MockVolumeTypeClient) CreateVolumeType(ctx context.Context, opts volumetypes.CreateOptsBuilder) (*volumetypes.VolumeType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolumeType", ctx, opts)
	ret0, _ := ret[0].(*volumetypes.VolumeType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolumeType indicates an expected call of CreateVolumeType.
func (mr *MockVolumeTypeClientMockRecorder) CreateVolumeType(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolumeType", reflect.TypeOf((*MockVolumeTypeClient)(nil).CreateVolumeType), ctx, opts)
}

// DeleteVolumeType mocks base method.
func (m *MockVolumeTypeClient) DeleteVolumeType(ctx context.Context, resourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolumeType", ctx, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVolumeType indicates an expected call of DeleteVolumeType.
func (mr *MockVolumeTypeClientMockRecorder) DeleteVolumeType(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolumeType", reflect.TypeOf((*MockVolumeTypeClient)(nil).DeleteVolumeType), ctx, resourceID)
}

// GetVolumeType mocks base method.
func (m *MockVolumeTypeClient) GetVolumeType(ctx context.Context, resourceID string) (*volumetypes.VolumeType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeType", ctx, resourceID)
	ret0, _ := ret[0].(*volumetypes.VolumeType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeType indicates an expected call of GetVolumeType.
func (mr *MockVolumeTypeClientMockRecorder) GetVolumeType(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeType", reflect.TypeOf((*MockVolumeTypeClient)(nil).GetVolumeType), ctx, resourceID)
}

// ListVolumeTypes mocks base method.
func (m *MockVolumeTypeClient) ListVolumeTypes(ctx context.Context, listOpts volumetypes.ListOptsBuilder) iter.Seq2[*volumetypes.VolumeType, error] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumeTypes", ctx, listOpts)
	ret0, _ := ret[0].(iter.Seq2[*volumetypes.VolumeType, error])
	return ret0
}

// ListVolumeTypes indicates an expected call of ListVolumeTypes.
func (mr *MockVolumeTypeClientMockRecorder) ListVolumeTypes(ctx, listOpts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumeTypes", reflect.TypeOf((*MockVolumeTypeClient)(nil).ListVolumeTypes), ctx, listOpts)
}

// UpdateVolumeType mocks base method.
func (m *MockVolumeTypeClient) UpdateVolumeType(ctx context.Context, id string, opts volumetypes.UpdateOptsBuilder) (*volumetypes.VolumeType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVolumeType", ctx, id, opts)
	ret0, _ := ret[0].(*volumetypes.VolumeType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVolumeType indicates an expected call of UpdateVolumeType.
func (mr *MockVolumeTypeClientMockRecorder) UpdateVolumeType(ctx, id, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVolumeType", reflect.TypeOf((*MockVolumeTypeClient)(nil).UpdateVolumeType), ctx, id, opts)
}
